# Copyright 2022 The Reg Reporting Blueprint Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'credit_poc'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'bigquery'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models
models:
  credit_poc:

    # Storing the failures for all the tests
    +store_failures: true  # all tests

    # Config to store the columns descriptions in datacatalog
    +persist_docs:
        relation: true
        columns: true

    ### SOURCE ###
    # Contains all the source data pre-processing
    00_source:
      +tags: 00_source
      # src contains ephemeral filters of source data
      src:
        +tags: src
        +materialized: ephemeral
      # staging prepares data in a denormalised form, while still retaining all source data with little value-add.
      # It re-shapes the data. Only one table is explicitly materialized in staging
      staging:
        +tags: staging
        +materialized: ephemeral

    ### DATA ANALYSIS ###
    # Models to analyse the data to understand which attributes have predictive power
    01_data_analysis:
      +tags: 01_data_analysis
      # Calculating IV values
      iv:
        +tags: information_value
        +materialized: table
      # Models auto-generated by the 'generate_metrics_uv_eval' script for univariate analysis on feature and  label
      uv_logistic:
        +tags: uv_logistic
        +materialized: model
        +enabled: true # set to false to avoid running all the UV analysis
        +post-hook: "{{ dbt_ml.model_audit() }}"

    ### FEATURES ENGINEERING ###
    # All the models to arrive at the training dataset, used for training
    02_features_engineering:
      +tags: 02_features_engineering
      # Prepares the data for training, including pivoting data and calculating extra features (e.g. ratios)
      preprocessing:
        +tags: preprocessing
        +materialized: table
      engineered_features:
        +tags: engineered_features
        +materialized: table

    ### TRAINED MODELS ###
    # Models trained upon the engineered features
    03_trained_models:
      +tags: 03_trained_models
      +materialized: model

    ### MODELS MONITORING ###
    # Models trained upon the engineered features
    04_models_monitoring:
      +tags: 04_models_monitoring
      +materialized: table

# Variables used in the SQL models
vars:
    financial_bq_data: financial_data                           # dataset where the source data is stored
    dbt_ml:audit_schema: "{{ env_var('CREDIT_POC_BQ_DATA') }}"  # Required for DBT ML
    dbt_ml:audit_table: "ml_models_audit"                       # Required for DBT ML audit information
    train_split_pct: 0.80                                       # The percentage of data to use for training, vs the percentage to be used for test

# Start and End hooks
on-run-start:
  - "{{ dbt_ml.create_model_audit_table() }}"                                              # BQML model  logging
  #- "{{ dbt_log.create_dbt_log(target) }}"                                                 # Tracking DBT Performance
  #- "{{ dbt_log.insert_dbt_log(target, 'START', dbt_log.graph_to_json(target, graph)) }}"  # Tracking DBT Performance

#on-run-end:
#  - "{{ dbt_log.insert_dbt_log(target, 'END', dbt_log.results_to_json(results)) }}"

